/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds
 */
 
 buildscript {
  repositories { mavenCentral() }
  dependencies { classpath 'org.ajoberstar:gradle-git:0.2.3' }
}

import org.ajoberstar.gradle.git.tasks.*

project.ext.set("flutterRepo", "https://github.com/rajashah33/new_login2")
project.ext.set("bootRepo", "https://github.com/rugit/LoginModule")
project.ext.set("baseDir", System.getProperty("user.dir"))
 
task cloneFlutterRepo(type: GitClone){
def destination = file(project.baseDir.replace("\\","//")+'//new_login2')
uri = project.flutterRepo
destinationPath = destination
 bare = false
 enabled = !destination.exists()
}
 
 task cloneGitRepo(type: GitClone){
 def destination = file(project.baseDir.replace("\\","//")+'//LoginModule')
 uri = project.bootRepo
 destinationPath = destination
 bare = false
 enabled = !destination.exists()
 }
 
 task serverBuild(type: GradleBuild){
 	dir = file(project.baseDir.replace("\\","//")+'//LoginModule')
 	tasks = ['booRun']
 }


task executeAPK(type:Exec) {
  workingDir 'new_login2/new_login2/'

  //on windows:
  commandLine 'cmd', '/c', 'flutter' , 'build' , 'apk'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}
 
// task executeAPK(type: GradleBuild){
// dir = file(project.baseDir.replace("\\","//")+'//new_login2//new_login2' + '//android')
// tasks = ['installDebug']
 /*doFirst{
 commandLine "cmd", "cd", "F://Dithok//craft//14-Sep//new_login2//new_login2"
 }*/
 /*exec {
 workingDir "F://Dithok//craft//14-Sep//new_login2//new_login2"
 commandLine "cmd", "flutter", "run"
 }*/
 // }
  
task setupDev {
    dependsOn 'cloneGitRepo'
    dependsOn 'serverBuild'
    tasks.findByName('serverBuild').mustRunAfter 'cloneGitRepo'
    //tasks.findByName('publish').mustRunAfter 'build'
}

task setupAndroid{
	dependsOn 'cloneFlutterRepo'
	dependsOn 'executeAPK'
	tasks.findByName('executeAPK').mustRunAfter 'cloneFlutterRepo'
}

task executeDev{
	dependsOn 'setupDev'
	dependsOn 'setupAndroid'
	tasks.findByName('setupAndroid').mustRunAfter 'setupDev'
}
/*task locExtract{
println project.baseDir.replace("\\","//")
}*/
